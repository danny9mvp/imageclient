/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package imageclient;

import imagebeans.Image;
import imageioimpl.ImageReaderImpl;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.rmi.NotBoundException;
import java.rmi.RemoteException;
import java.util.HashMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;

/**
 *
 * @author ASUS
 */
public class GUI extends javax.swing.JFrame {

    /**
     * Creates new form GUI
     */    
    public GUI() {
        this.setTitle("Cliente RMI de imágenes");
        this.setLocationRelativeTo(null);
        initComponents();
    }        
    
    public void refreshImagesOnServerTree(){
        try {
            String host = this.txtHost.getText();
            ImageClient imageClient = new ImageClient();
            HashMap<String,String[]> imageRepositoryWithImages = imageClient.requestImageRepositoryWithImages(host);                        
            imageRepositoryWithImages.forEach((root, images)->{               
               DefaultTreeModel defaultTreeModel =populateTreeModel(root,images);            
               this.jtreeImageRepository.setModel(defaultTreeModel);
            });            
                    } catch (RemoteException | NotBoundException ex) {
            Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "Error al intentar establecer conexión con el servidor de imágenes.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    public DefaultTreeModel populateTreeModel(String root, String[] leafs){
        DefaultMutableTreeNode treeRoot = new DefaultMutableTreeNode(root);
        DefaultTreeModel defaultTreeModel = new DefaultTreeModel(treeRoot);
        for(String leaf : leafs){
            DefaultMutableTreeNode child = new DefaultMutableTreeNode(leaf);
            treeRoot.add(child);
        }
        return defaultTreeModel;
    }
    
    public File chooseImageFile(String jFileChooserTitle) throws IOException {
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        fileChooser.setFileFilter(new FileNameExtensionFilter("Archivos de imagen", new String[]{"JPEG", "PNG", "GIF"}));
        int selection = fileChooser.showDialog(this, "Seleccionar");
        if (selection == JFileChooser.APPROVE_OPTION) {
            File imgFile = fileChooser.getSelectedFile();
            return imgFile;
        } else {
            return null;
        }
    }

    public File chooseFolder(String jFileChooserTitle) throws IOException {
        JFileChooser folderChooser = new JFileChooser();
        folderChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        int folderSelection = folderChooser.showDialog(this, jFileChooserTitle);
        if (folderSelection == JFileChooser.APPROVE_OPTION) {
            File destinationDirectory = folderChooser.getSelectedFile();            
            return destinationDirectory;
        } else {
            return null;
        }
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        txtHost = new javax.swing.JTextField();
        btnListImages = new javax.swing.JButton();
        btnDownloadImage = new javax.swing.JButton();
        btnUploadImage = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        spinnerRefreshingRate = new javax.swing.JSpinner();
        jScrollPane2 = new javax.swing.JScrollPane();
        jtreeImageRepository = new javax.swing.JTree();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Host:");

        btnListImages.setText("Listar imágenes");
        btnListImages.setToolTipText("Refrescar lista de imágenes disponibles en el servidor.");
        btnListImages.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnListImagesActionPerformed(evt);
            }
        });

        btnDownloadImage.setText("Descargar imagen");
        btnDownloadImage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDownloadImageActionPerformed(evt);
            }
        });

        btnUploadImage.setText("Cargar imagen");
        btnUploadImage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUploadImageActionPerformed(evt);
            }
        });

        jLabel2.setText("Tasa de actualización:");

        spinnerRefreshingRate.setValue(30000);

        javax.swing.tree.DefaultMutableTreeNode treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("root");
        jtreeImageRepository.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
        jScrollPane2.setViewportView(jtreeImageRepository);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(spinnerRefreshingRate))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(18, 18, 18)
                        .addComponent(txtHost, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane2))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnListImages, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnUploadImage, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnDownloadImage))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtHost, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(spinnerRefreshingRate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(btnListImages)
                        .addGap(18, 18, 18)
                        .addComponent(btnUploadImage)
                        .addGap(18, 18, 18)
                        .addComponent(btnDownloadImage)
                        .addGap(0, 69, Short.MAX_VALUE))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnListImagesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnListImagesActionPerformed
        Thread thread = new Thread(() -> {
            while(true){
                try {                    
                    this.refreshImagesOnServerTree();
                    long delay =  Long.parseLong(this.spinnerRefreshingRate.getValue().toString());
                    Thread.sleep(delay);
                } catch (InterruptedException ex) {
                    Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
                }
            }            
        });
        thread.start();        
    }//GEN-LAST:event_btnListImagesActionPerformed

    private void btnDownloadImageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDownloadImageActionPerformed
        try {
            File downloadsFolder = chooseFolder("Guardar imagen");
            if(downloadsFolder != null){
                ImageClient imageClient = new ImageClient();
                String host = this.txtHost.getText();
                String imageName = this.jtreeImageRepository.getLastSelectedPathComponent().toString();
                Image image = imageClient.requestImage(host, imageName);
                FileOutputStream fileOutputStream = new FileOutputStream(downloadsFolder.getPath()+File.separator+image.getName());
                fileOutputStream.write(image.getContent());
                fileOutputStream.close();
            }             
        } catch (RemoteException | NotBoundException ex) {
            Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "Ha ocurrido un error al intentar descargar la imagen solicitada.", "Error", JOptionPane.ERROR_MESSAGE);
        }
        catch(IOException ex){
            Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "Error en la selección del directorio de descargas, es posible que su nombre o ubicación hallan cambiado.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnDownloadImageActionPerformed

    private void btnUploadImageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUploadImageActionPerformed
        try{
            File imageFile = chooseImageFile("Seleccionar imagen");
            if(imageFile != null){
                ImageClient imageClient = new ImageClient();
                String host = this.txtHost.getText();
                ImageReaderImpl imageReaderImpl = new ImageReaderImpl();
                Image image = imageReaderImpl.readAsImage(imageFile);
                imageClient.postImage(host, image);
            }
        } catch (RemoteException | NotBoundException ex) {
            Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "Ha ocurrido un error al intentar descargar la imagen solicitada.", "Error", JOptionPane.ERROR_MESSAGE);
        }
        catch(IOException ex){
            Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "Error en la selección del directorio de descargas, es posible que su nombre o ubicación hallan cambiado.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnUploadImageActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDownloadImage;
    private javax.swing.JButton btnListImages;
    private javax.swing.JButton btnUploadImage;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTree jtreeImageRepository;
    private javax.swing.JSpinner spinnerRefreshingRate;
    private javax.swing.JTextField txtHost;
    // End of variables declaration//GEN-END:variables
}
